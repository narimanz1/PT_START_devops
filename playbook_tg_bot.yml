# Плейбук Ansible

# Сначала установим все необходимое на хосты
- name: Installation to hosts
  hosts: myhosts
  become: true
  tasks:
    - name: Install Postgresql
      package:
        name: postgresql
        state: present
    - name: Install Postgresql-contrib
      package:
        name: postgresql-contrib
        state: present
    - name: Install libpq-dev
      package:
        name: libpq-dev
        state: present

# Перейдем к настройке хоста с ботом и бд
- name: host for db + bot
  hosts: host1
  become: true
  tasks:
    - name: apt install
      apt:
        pkg:
          - python3-pip
          - git
          - sysstat

    - name: Remove existing directory
      file:
        path: "{{ hostvars[inventory_hostname]['WORKDIR'] }}"
        state: absent

    - name: Git Clone
      git:
        repo: https://github.com/narimanz1/PT_START_devops.git
        dest: "{{ hostvars[inventory_hostname]['WORKDIR'] }}"
        version: main
    - name: Pip pip pip
      pip:
        requirements: "{{ hostvars[inventory_hostname]['WORKDIR'] }}/requirements.txt"

    - name: Logs
      command: mkdir -pm 777 "{{ hostvars[inventory_hostname]['WORKDIR'] }}/../logs"

    - name: postgresql.conf
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_PORT'] }}
          max_wal_senders=10
          wal_level=replica
          wal_log_hints = on
          hot_standby=on
          max_replication_slots=10
          hot_standby_feedback=on
          log_replication_commands=on

    - name: pg_hba
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/pg_hba.conf"
        block: |
          local all all trust
          host replication all {{ hostvars[inventory_hostname]['ansible_host'] }}/24 scram-sha-256
          host all all {{ hostvars[inventory_hostname]['ansible_host'] }}/32 trust

    - name: Just restart
      service:
        name: postgresql
        state: restarted
      become: true

    - name: Copy init
      copy:
        src: init.sql
        dest: /tmp/init.sql
        mode: '0644'
    - name: Cho?
      command: chown postgres:postgres /tmp/init.sql
    - name: replacedb
      replace:
        path: /tmp/init.sql
        regexp: "replacedbname"
        replace: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"
    - name: replaceuser
      replace:
        path: /tmp/init.sql
        regexp: "replacerepluser"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
    - name: replacepassword
      replace:
        path: /tmp/init.sql
        regexp: "replacereplpassword"
        replace: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
    - name: replacepostgresuser
      replace:
        path: /tmp/init.sql
        regexp: "replacepostgresuser"
        replace: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
    - name: replacepostgrespassword
      replace:
        path: /tmp/init.sql
        regexp: "replacepostgrespassword"
        replace: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
    - name: Just restart 2
      service:
        name: postgresql
        state: restarted
    - name: init.sql
      command: psql -a -f /tmp/init.sql
      become: true
      become_user: postgres

# Перейдем к настройке хоста репликации
- name: db_repl_host
  hosts: host2
  become: true
  tasks:
    - name:
      blockinfile:
        path: "/etc/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/postgresql.conf"
        block: |
          listen_addresses = '*'
          port = {{ hostvars[inventory_hostname]['DB_REPL_PORT'] }}
      become: true
      become_user: postgres

    - name: apply configuration but for repl
      service:
        name: postgresql
        state: restarted
      become: true

    - name: cleaning
      command: rm -rf /var/lib/postgresql/{{ hostvars[inventory_hostname]['POSTGRES_VERSION']}}/
      become: true
      become_user: postgres

    - name: replication start
      environment:
        PGUSER: "{{ hostvars[inventory_hostname]['DB_REPL_USER'] }}"
        PGPASSWORD: "{{ hostvars[inventory_hostname]['DB_REPL_PASSWORD'] }}"
      command: pg_basebackup -h {{ hostvars[inventory_hostname]['DB_HOST'] }} -D /var/lib/postgresql/{{hostvars[inventory_hostname]['POSTGRES_VERSION'] }}/main/ -p {{ hostvars[inventory_hostname]['DB_PORT'] }} -U {{ hostvars[inventory_hostname]['DB_REPL_USER'] }}
      become: true
      become_user: postgres

    - name: ChoNiCho
      command: chown -R postgres:postgres /var/lib/postgresql/
      become: true
      become_user: postgres
    - name: Just restart 2
      service:
        name: postgresql
        state: restarted


# Запуск бота
- name: main
  hosts: host1
  become: true
  tasks:
    - name: starting bot
      command: python3 "{{ hostvars[inventory_hostname]['WORKDIR'] }}/bot.py"
      environment:
        TOKEN: "{{ hostvars[inventory_hostname]['TOKEN'] }}"
        RM_HOST: "{{ hostvars[inventory_hostname]['RM_HOST'] }}"
        RM_PORT: "{{ hostvars[inventory_hostname]['RM_PORT'] }}"
        RM_USER: "{{ hostvars[inventory_hostname]['RM_USER'] }}"
        RM_PASSWORD: "{{ hostvars[inventory_hostname]['RM_PASSWORD'] }}"
        DB_HOST: "{{ hostvars[inventory_hostname]['DB_HOST'] }}"
        DB_PORT: "{{ hostvars[inventory_hostname]['DB_PORT'] }}"
        DB_USER: "{{ hostvars[inventory_hostname]['DB_USER'] }}"
        DB_PASSWORD: "{{ hostvars[inventory_hostname]['DB_PASSWORD'] }}"
        DB_DATABASE: "{{ hostvars[inventory_hostname]['DB_DATABASE'] }}"